digraph "clusterалгоритм обчислення суми перших N натуральних чисел." {
	graph [label="алгоритм обчислення суми перших N натуральних чисел."]
	1 [label="def is_prime(n):...
def sum_of_first_n_prime_numbers(n):...
n = int(input('Enter n: '))
print(sum_of_first_n_prime_numbers(n))
"]
	"1_calls" [label="int
print" shape=box]
	1 -> "1_calls" [label=calls style=dashed]
	subgraph clusteris_prime {
		graph [label=is_prime]
		3 [label="if n == 1:
"]
		4 [label="return False
"]
		3 -> 4 [label="n == 1"]
		5 [label="if n == 2:
"]
		7 [label="return True
"]
		5 -> 7 [label="n == 2"]
		8 [label="for i in range(2, n):
"]
		10 [label="if n % i == 0:
"]
		12 [label="return False
"]
		10 -> 12 [label="n % i == 0"]
		10 -> 8 [label="(n % i != 0)"]
		8 -> 10 [label="range(2, n)"]
		11 [label="return True
"]
		8 -> 11 [label=""]
		5 -> 8 [label="(n != 2)"]
		3 -> 5 [label="(n != 1)"]
	}
	subgraph clustersum_of_first_n_prime_numbers {
		graph [label=sum_of_first_n_prime_numbers]
		18 [label="sum = 0
count = 0
i = 1
"]
		19 [label="while count < n:
"]
		20 [label="if is_prime(i):
"]
		22 [label="sum += i
count += 1
"]
		23 [label="i += 1
"]
		23 -> 19 [label=""]
		22 -> 23 [label=""]
		20 -> 22 [label="is_prime(i)"]
		20 -> 23 [label="(not is_prime(i))"]
		19 -> 20 [label="count < n"]
		21 [label="return sum
"]
		19 -> 21 [label="(count >= n)"]
		18 -> 19 [label=""]
	}
}
